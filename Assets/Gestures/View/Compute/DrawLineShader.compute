#pragma kernel Draw
#pragma kernel Bake
#pragma kernel Clear

RWTexture2D<float4> main_tex;
Buffer<float3> path;
float4 threads_count;
float4 canvas_size;
float4 start_draw;
float4 end_draw;
float4 brush_color;
float brush_radius;

float get_length(float2 value)
{
    return sqrt(value.x * value.x + value.y * value.y);
}

float get_distance_to_line(float2 start, float2 end, float2 value)
{
    float2 direction = end - start;
    float d = get_length(direction);
    if (d == 0)
    {
        return get_length(start - value);
    }
    direction /= d;

    float2x2 rotationMatrix = float2x2(direction.x, direction.y,
                                       -direction.y, direction.x);
    float2 valueInLineSpace = mul(rotationMatrix, value - start);

    if (valueInLineSpace.x < 0)
    {
        return get_length(start - value);
    }
    else if (valueInLineSpace.x > d)
    {
        return get_length(end - value);
    }
    else
    {
        return abs(valueInLineSpace.y);
    }
}

float smooth(float value, float power)
{
    float result = pow(value, power);
    return result / (result + pow((1 - value), power));
}

void draw(uint3 id, bool bake)
{
    float2 pixel_position = ((float2)id.xy) / threads_count.xy * canvas_size.xy;
    float d = get_distance_to_line(start_draw, end_draw, pixel_position);
    if (!bake && d > brush_radius)
    {
        return;
    }
    float brush = smooth(max((1.0f - d / brush_radius), 0), 1.5f);
    float source = main_tex[id.xy].a;
    float4 result = float4(brush_color.xyz, max(source, brush_color.a * brush));
    main_tex[id.xy] = result;
}

[numthreads(8,8,1)]
void Draw (uint3 id : SV_DispatchThreadID)
{
    draw(id, false);
}

[numthreads(8,8,1)]
void Bake (uint3 id : SV_DispatchThreadID)
{
    draw(id, true);
}

[numthreads(8,8,1)]
void Clear (uint3 id : SV_DispatchThreadID)
{
    main_tex[id.xy] = float4(0, 0, 0, 0);
}
